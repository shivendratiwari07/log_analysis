name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  actions: read
  contents: read

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m venv myenv
          source myenv/bin/activate
          pip install requests

      - name: Run openai.py script
        run: |
          source myenv/bin/activate
          python openai.py

  list-and-download-logs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m venv myenv
          source myenv/bin/activate
          pip install requests

      - name: Run openai.py script
        run: |
          source myenv/bin/activate
          python openai.py

      - name: Create logs directory
        run: mkdir -p logs

      - name: List Available Runs
        id: list-runs
        run: |
          echo "Listing available runs for the repository..."
          curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               -L \
               https://api.github.com/repos/${{ github.repository }}/actions/runs \
               > logs/runs.log
          cat logs/runs.log
          RUN_ID=$(jq -r '.workflow_runs[0].id' logs/runs.log)
          echo "Selected run ID: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

      - name: Download Logs
        run: |
          mkdir -p logs
          echo "Downloading logs from GitHub API using run ID ${{ env.RUN_ID }}"
          curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               -L -o logs/logs.log \
               https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ env.RUN_ID }}/logs
          echo "Logs downloaded. Checking file type..."
          file logs/logs.log
          echo "Contents of logs.log:"
          cat logs/logs.log

      - name: Upload logs
        uses: actions/upload-artifact@v2
        with:
          name: workflow-logs
          path: logs/logs.log







  # logs-download:
  #   name: Download GH action logs
  #   runs-on: ubuntu-latest
  #   needs: run-script
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2.0.0

  #     - name: Download Logs
  #       run: |
  #         mkdir -p logs
  #         echo "Downloading logs from GitHub API"
  #         curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
  #              -H "Accept: application/vnd.github.v3+json" \
  #              -L -o logs/logs.json \
  #              https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/logs
  #         echo "Logs downloaded. Checking file type..."
  #         file logs/logs.json
  #         echo "Contents of logs.json:"
  #         cat logs/logs.json

  #     - name: Extract Logs from JSON
  #       run: |
  #         echo "Extracting log entries from JSON..."
  #         if jq -e . logs/logs.json > /dev/null 2>&1; then
  #           cat logs/logs.json | jq '.' > logs/extracted_logs.txt
  #           echo "Log entries extracted:"
  #           cat logs/extracted_logs.txt
  #         else
  #           echo "Downloaded JSON is not valid."
  #         fi

  #     - name: Upload logs
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: workflow-logs
  #         path: logs/







# name: CI Workflow

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# permissions:
#   actions: read
#   contents: read

# jobs:
#   run-script:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v2

#     - name: Set up Python 3.12
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.12'

#     - name: Install dependencies
#       run: |
#         python -m venv myenv
#         source myenv/bin/activate
#         pip install requests

#     - name: Run openai.py script
#       run: |
#         source myenv/bin/activate
#         python openai.py

#   build-and-test:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v2

#     - name: Set up Python 3.12
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.12'

#     - name: Install dependencies
#       run: |
#         python -m venv myenv
#         source myenv/bin/activate
#         pip install -r requirements.txt

#     # - name: Run tests
#     #   run: |
#     #     source myenv/bin/activate
#     #     pytest --maxfail=5 --disable-warnings



#   upload-logs:
#     runs-on: ubuntu-latest
#     needs: [run-script]

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v2

#     - name: Set up Python 3.12
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.12'

#     - name: Install dependencies
#       run: |
#         python -m venv myenv
#         source myenv/bin/activate
#         pip install requests azure-storage-blob

#     - name: Upload logs to Azure
#       env:
#         GITHUB_TOKEN: ${{ secrets.PAT }}
#         GITHUB_RUN_ID: ${{ github.run_id }}
#         GITHUB_REPOSITORY: ${{ github.repository }}
#         AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
#       run: |
#         source myenv/bin/activate
#         python scripts/upload_logs_to_azure.py
#   # debug-fetch-logs:
#   #   runs-on: ubuntu-latest
#   #   needs: [run-script, build-and-test]

#   #   steps:
#   #   - name: Checkout repository
#   #     uses: actions/checkout@v2

#   #   - name: Set up Python 3.12
#   #     uses: actions/setup-python@v4
#   #     with:
#   #       python-version: '3.12'

#   #   - name: Install dependencies
#   #     run: |
#   #       python -m venv myenv
#   #       source myenv/bin/activate
#   #       pip install requests

#   #   - name: Debug Fetch Logs
#   #     env:
#   #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   #       GITHUB_RUN_ID: ${{ github.run_id }}
#   #       GITHUB_REPOSITORY: ${{ github.repository }}
#   #     run: |
#   #       source myenv/bin/activate
#   #       python scripts/debug_fetch_logs.py
